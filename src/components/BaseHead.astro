---
import '../styles/global.css';
import { localeData, locale } from '../langs/lang';
import { ViewTransitions } from "astro:transitions";
import { getCollection } from 'astro:content';

interface Props {
	title: string;
	description: string;
	image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// glob favicon from public folder
const favicons = import.meta.glob('../../public/favicon.*');
const favicon = Object.keys(favicons)[Math.floor(Math.random() * Object.keys(favicons).length)]?.replace('../../public/', '') ?? 'default-favicon.svg';
let faviconType;
if (favicon.endsWith('.svg')) faviconType = 'image/svg+xml';
else if (favicon.endsWith('.png')) faviconType = 'image/png';
else if (favicon.endsWith('.ico')) faviconType = 'image/x-icon';
else if (favicon.endsWith('.jpg') || favicon.endsWith('.jpeg')) faviconType = 'image/jpeg';
else if (favicon.endsWith('.webp')) faviconType = 'image/webp';
else if (favicon.endsWith('.gif')) faviconType = 'image/gif';
else throw new Error('Unsupported favicon type');

// try to glob thumbnail from public folder
const thumbnails = import.meta.glob('../../public/thumbnail.*');
const thumbnail = Object.keys(thumbnails)[Math.floor(Math.random() * Object.keys(thumbnails).length)]?.replace('../../public/', '') ?? 'astro-placeholder.jpg';

const { title, description, image } = Astro.props;

const posts = (await getCollection('article')).map((e: any) => Object.assign(e.data, { slug: e.slug }));
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
<link rel="icon" type={ faviconType } href={ new URL(favicon, Astro.site).pathname } />
<meta name="generator" content={ Astro.generator } />


<!-- Canonical URL -->
<link rel="canonical" href={ canonicalURL } />

<!-- Primary Meta Tags -->
<title>{ title }</title>
<meta name="title" content={ title } />
<meta name="description" content={ description } />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={ Astro.url } />
<meta property="og:title" content={ title } />
<meta property="og:description" content={ description } />
<meta property="og:image" content={ image ? new URL(image, Astro.url) : new URL(thumbnail, Astro.site) } />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={ Astro.url } />
<meta property="twitter:title" content={ title } />
<meta property="twitter:description" content={ description } />
<meta property="twitter:image" content={ image ? new URL(image, Astro.url) : new URL(thumbnail, Astro.site) } />

<!-- Sitemap -->
<link rel="sitemap" href={ new URL("sitemap-index.xml", Astro.site).pathname } />

<!-- RSS -->
<link
	rel="alternate"
	type="application/rss+xml"
	title={ title }
	href={ new URL("rss.xml", Astro.site) }
/>

<script>
import 'preline/preline'; // preline
import 'iconify-icon'; // iconify web component
import query from './query';
import type { QueryReturn } from './query.d';

declare global {
    interface Window {
		query: QueryReturn
    }
}

window.query = query();
</script>

<script is:inline define:vars={{ localeData, locale, posts, canonicalURL }}>
window.SITE_BASE = canonicalURL.pathname;
window.localeData = localeData;
window.locale = locale;
globalThis.posts = posts;

// initialize theme localStorage
if (!localStorage.theme && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) localStorage.hs_theme = 'dark';
</script>

<ViewTransitions />
