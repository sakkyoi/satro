---
import type { MarkdownHeading } from 'astro';
export type Props = {
    headings: MarkdownHeading[],
}

const { headings } = Astro.props;

const grouppedHeadings = headings.reduce((array: Array<any>, h) => {
    if (h.depth === 1) {
        array.push({ ...h, subheadings: [] });
    } else if (h.depth === 2) {
        array.at(-1)?.subheadings.push(h);
    }

    return array;
}, [] as Props['headings']);
---

{
    grouppedHeadings.map((h, i) => (
        <li data-hs-scrollspy-group="">
            <a href={ `#${h.slug}` } class={ "block py-0.5 text-sm font-medium leading-6 text-gray-700 hover:text-gray-900 focus:outline-none focus:text-blue-600 dark:text-neutral-400 dark:hover:text-neutral-300 dark:focus:text-blue-500 hs-scrollspy-active:text-blue-600 dark:hs-scrollspy-active:text-blue-500" + ((i==0) ? " active" : "") }>{ h.text }</a>
            {
                h.subheadings.length > 0 && (
                    h.subheadings.map((sh: { slug: string, text: string }) => (
                    <li class="ms-4">
                        <a href={ `#${sh.slug}` } class="group flex items-center gap-x-2 py-0.5 text-sm text-gray-700 leading-6 hover:text-gray-800 focus:outline-none focus:text-blue-600 dark:text-neutral-400 dark:hover:text-neutral-300 dark:focus:text-blue-500 hs-scrollspy-active:text-blue-600 dark:hs-scrollspy-active:text-blue-500">
                            <svg class="shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="m9 18 6-6-6-6"></path>
                            </svg>
                            { sh.text }
                        </a>
                    </li>
                    ))
                )
            }
        </li>
    ))
}
